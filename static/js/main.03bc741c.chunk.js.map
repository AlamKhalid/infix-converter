{"version":3,"sources":["util/conversion.js","App.js","reportWebVitals.js","index.js"],"names":["reverseString","str","split","reverse","join","isAlpha","c","isDigit","isOperator","getPriority","infixToPostfix","exp","stack","output","i","unshift","shift","App","useState","val","text","toOptions","setToOptions","fromOptions","from","setFrom","to","setTo","setExp","setOutput","className","Container","Form","onSubmit","e","preventDefault","infixToPrefix","s","op1","op2","temp","prefixToInfix","prefixToPostfix","postfixToInfix","ans","length","postfixToPrefix","Row","Col","Input","type","value","onChange","currentTarget","map","op","defaultValue","placeholder","Button","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03bc741c.chunk.js","sourcesContent":["function reverseString(str) {\r\n  return str.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nfunction isAlpha(c) {\r\n  return (c >= \"A\" && c <= \"Z\") || (c >= \"a\" && c <= \"z\");\r\n}\r\n\r\nfunction isDigit(c) {\r\n  return c >= \"0\" && c <= \"9\";\r\n}\r\n\r\nfunction isOperator(c) {\r\n  return !isAlpha(c) && !isDigit(c);\r\n}\r\n\r\nfunction getPriority(c) {\r\n  if (c === \"-\" || c === \"+\") return 1;\r\n  else if (c === \"*\" || c === \"/\") return 2;\r\n  else if (c === \"^\") return 3;\r\n  return 0;\r\n}\r\n\r\nexport function infixToPostfix(exp) {\r\n  exp = \"(\" + exp + \")\";\r\n  const stack = [];\r\n  var output = \"\";\r\n  for (var i in exp) {\r\n    if (isAlpha(exp[i]) || isDigit(exp[i])) output += exp[i];\r\n    else if (exp[i] === \"(\") stack.unshift(\"(\");\r\n    else if (exp[i] === \")\") {\r\n      while (stack[0] !== \"(\") {\r\n        output += stack.shift();\r\n      }\r\n      stack.shift();\r\n    } else {\r\n      if (isOperator(stack[0])) {\r\n        while (\r\n          getPriority(exp[i]) < getPriority(stack[0]) ||\r\n          (getPriority(exp[i]) <= getPriority(stack[0]) && exp[i] === \"^\")\r\n        ) {\r\n          output += stack.shift();\r\n        }\r\n        stack.unshift(exp[i]);\r\n      }\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function infixToPrefix(exp) {\r\n  exp = reverseString(exp);\r\n\r\n  for (var i in exp) {\r\n    if (exp[i] === \"(\") {\r\n      exp[i] = \")\";\r\n      i++;\r\n    } else if (exp[i] === \")\") {\r\n      exp[i] = \"(\";\r\n      i++;\r\n    }\r\n  }\r\n  const output = infixToPostfix(exp);\r\n  return reverseString(output);\r\n}\r\n\r\nexport function postfixToInfix(exp) {\r\n  const s = [];\r\n  for (var i in exp) {\r\n    if (isAlpha(exp[i]) || isDigit(exp[i])) {\r\n      s.unshift(exp[i]);\r\n    } else {\r\n      const op1 = s.shift();\r\n      const op2 = s.shift();\r\n      s.unshift(\"(\" + op2 + exp[i] + op1 + \")\");\r\n    }\r\n  }\r\n  return s[0];\r\n}\r\n\r\nexport function postfixToPrefix(exp) {\r\n  const s = [];\r\n  for (var i in exp) {\r\n    if (isOperator(exp[i])) {\r\n      const op1 = s.shift();\r\n      const op2 = s.shift();\r\n      const temp = exp[i] + op2 + op1;\r\n      s.unshift(temp);\r\n    } else {\r\n      s.unshift(exp[i]);\r\n    }\r\n  }\r\n  var ans = \"\";\r\n  while (s.length) {\r\n    ans += s.shift();\r\n  }\r\n  return ans;\r\n}\r\n\r\nexport function prefixToPostfix(exp) {\r\n  const s = [];\r\n  for (var i in exp) {\r\n    if (isOperator(exp[i])) {\r\n      const op1 = s.shift();\r\n      const op2 = s.shift();\r\n      const temp = op1 + op2 + exp[i];\r\n      s.unshift(temp);\r\n    } else {\r\n      s.unshift(exp[i]);\r\n    }\r\n  }\r\n  return s[0];\r\n}\r\n\r\nexport function prefixToInfix(exp) {\r\n  const s = [];\r\n  for (var i in exp) {\r\n    if (isOperator(exp[i])) {\r\n      const op1 = s.shift();\r\n      const op2 = s.shift();\r\n      const temp = \"(\" + op1 + exp[i] + op2 + \")\";\r\n      s.unshift(temp);\r\n    } else {\r\n      s.unshift(exp[i]);\r\n    }\r\n  }\r\n  return s[0];\r\n}\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Container, Row, Col, Input, Form, Button } from \"reactstrap\";\nimport {\n  infixToPostfix,\n  infixToPrefix,\n  postfixToInfix,\n  postfixToPrefix,\n  prefixToPostfix,\n  prefixToInfix,\n} from \"./util/conversion\";\n\nfunction App() {\n  const [toOptions, setToOptions] = useState([\n    { val: \"pre\", text: \"Prefix\" },\n    { val: \"post\", text: \"Postfix\" },\n  ]);\n  const [fromOptions] = useState([\n    { val: \"in\", text: \"Infix\" },\n    { val: \"pre\", text: \"Prefix\" },\n    { val: \"post\", text: \"Postfix\" },\n  ]);\n  const [from, setFrom] = useState(fromOptions[0]);\n  const [to, setTo] = useState(toOptions[0]);\n  const [exp, setExp] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n\n  const handleFrom = ({ currentTarget }) => {\n    const val = currentTarget.value;\n    switch (val) {\n      case \"in\":\n        setToOptions([\n          { val: \"pre\", text: \"Prefix\" },\n          { val: \"post\", text: \"Postfix\" },\n        ]);\n        setFrom({ val: \"in\", text: \"Infix\" });\n        break;\n      case \"pre\":\n        setToOptions([\n          { val: \"in\", text: \"Infix\" },\n          { val: \"post\", text: \"Postfix\" },\n        ]);\n        setFrom({ val: \"pre\", text: \"Prefix\" });\n        break;\n      case \"post\":\n        setToOptions([\n          { val: \"pre\", text: \"Prefix\" },\n          { val: \"in\", text: \"Infix\" },\n        ]);\n        setFrom({ val: \"post\", text: \"Postfix\" });\n        break;\n      default:\n    }\n  };\n  const handleTo = ({ currentTarget }) => {\n    switch (currentTarget.value) {\n      case \"in\":\n        setTo({ val: \"in\", text: \"Infix\" });\n        break;\n      case \"pre\":\n        setTo({ val: \"pre\", text: \"Prefix\" });\n        break;\n      case \"post\":\n        setTo({ val: \"post\", text: \"Postfix\" });\n        break;\n      default:\n    }\n  };\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    switch (from.val) {\n      case \"in\":\n        switch (to.val) {\n          case \"pre\":\n            setOutput(infixToPrefix(exp));\n            break;\n          case \"post\":\n            setOutput(infixToPostfix(exp));\n            break;\n          default:\n        }\n        break;\n      case \"pre\":\n        switch (to.val) {\n          case \"in\":\n            setOutput(prefixToInfix(exp));\n            break;\n          case \"post\":\n            setOutput(prefixToPostfix(exp));\n            break;\n          default:\n        }\n        break;\n      case \"post\":\n        switch (to.val) {\n          case \"in\":\n            setOutput(postfixToInfix(exp));\n            break;\n          case \"pre\":\n            setOutput(postfixToPrefix(exp));\n            break;\n          default:\n        }\n        break;\n      default:\n    }\n  };\n\n  return (\n    <div className=\"bg-color\">\n      <h1 className=\"pb-5\">Prefix Infix Postfix Converter</h1>\n      <Container>\n        <Form onSubmit={onSubmit}>\n          <Row>\n            <Col>\n              <Input type=\"select\" value={from.val} onChange={handleFrom}>\n                {fromOptions.map((op) => (\n                  <option value={op.val} key={op.val}>\n                    {op.text}\n                  </option>\n                ))}\n              </Input>\n            </Col>\n            <Col>\n              <h2>TO</h2>\n            </Col>\n            <Col>\n              <Input type=\"select\" onChange={handleTo} defaultValue={to.val}>\n                {toOptions.map((op) => (\n                  <option value={op.val} key={op.val}>\n                    {op.text}\n                  </option>\n                ))}\n              </Input>\n            </Col>\n          </Row>\n          <p className=\"my-4\">\n            Note: It works with both numbers and alphabets. In case of numbers\n            only provide numbers less than 10.\n          </p>\n          <Input\n            type=\"text\"\n            value={exp}\n            onChange={({ currentTarget }) => setExp(currentTarget.value)}\n            placeholder={`Enter ${from.text} Notation`}\n          />\n          <br />\n          <Button color=\"danger\">Convert</Button>\n        </Form>\n        <div className=\"output mt-4\">\n          <h4>Output</h4>\n          <h6>{output}</h6>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}